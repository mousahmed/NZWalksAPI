name: Build and Deploy Lambda

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository code
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Setup .NET
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '8.0.x'

    # Step 3: Restore NuGet dependencies
    - name: Restore dependencies
      run: dotnet restore

    # Step 4: Build the .NET project in Release mode
    - name: Build the project
      run: dotnet build --configuration Release

    # Step 5: Publish the .NET project to a directory
    - name: Publish the .NET project
      run: dotnet publish -c Release -o ./output

    # Step 6: Zip the output for Lambda
    - name: Zip the output folder
      run: zip -r lambda-api.zip ./output

    # Step 7: Upload the zip to S3
    - name: Upload Lambda package to S3
      run: aws s3 cp lambda-api.zip s3://your-s3-bucket-name/lambda/dotnet-api.zip
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: 'us-east-1' # Change this to your AWS region

    # Step 8: Install Terraform
    - name: Install Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0 # Update to the latest version if necessary

    # Step 9: Terraform Init
    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform

    # Step 10: Terraform Plan
    - name: Terraform Plan
      run: terraform plan
      working-directory: ./terraform
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    # Step 11: Terraform Apply (Automated Approval)
    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: ./terraform
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
